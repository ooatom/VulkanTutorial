#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout(binding = 0) uniform ParametorUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

//layout (binding = 0, rgba8) uniform readonly image2D inputImage;
//layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

void main() {
//    vec3 pixel = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
//    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);

    // Uniquely identifies the current compute shader invocation across the current dispatch
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    if (particlesOut[index].position.x <= -1 || particlesOut[index].position.x >= 1) {
        particlesOut[index].velocity.x *= -1;
//        particlesOut[index].position.x = sign(particlesOut[index].position.x) * 0.99;
        particlesOut[index].position = vec2(0.0, 0.0);
    }
    if (particlesOut[index].position.y <= -1 || particlesOut[index].position.y >= 1) {
        particlesOut[index].velocity.y *= -1;
//        particlesOut[index].position.y = sign(particlesOut[index].position.y) * 0.99;
        particlesOut[index].position = vec2(0.0, 0.0);
    }
}